name: Release
on:
  push:
    branches:
      - master
jobs:
  test:
    name: Test
    uses: ./.github/workflows/tests.yml
  docker:
    name: Build container
    runs-on: ubuntu-22.04
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v3

      - name: Login to docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: "🔧 setup buildx"
        uses: docker/setup-buildx-action@v2.5.0

      - name: "🔧 cache docker layers"
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
      # - name: "🔧 docker meta"
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: ${{ github.repository }}
      #     tags: latest
      - name: "📦 docker build"
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
  # build:
  #   name: Build application
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: "☁️  checkout repository"
  #       uses: actions/checkout@v3
  #     - name: "🔧 setup node"
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 18
  #     - name: "🔧 install npm@latest"
  #       run: npm i -g npm@latest
  #     - name: "📦 generate package-lock.json"
  #       run: npm i --package-lock-only
  #     - name: "📦 install dependencies"
  #       uses: bahmutov/npm-install@v1
  #     - name: "📊 repository visualizer"
  #       id: diagram
  #       uses: githubocto/repo-visualizer@0.7.1
  #       with:
  #         excluded_paths: "node_modules,dist,.github"
  #         output_file: "public/diagram.svg"
  #         should_push: false
  #         root_path: "src/"
  #         artifact_name: "diagram"
  #     - name: "🚀 app"
  #       run: npm run build
  #     - name: "📂 production artifacts"
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: build
  #         path: dist
  release:
    name: Release in deploy server
    needs:
      - test
      - docker
      # - build
    runs-on: ubuntu-20.04
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # - name: "📂 download docker artifacts"
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: docker
      #     path: /tmp
      # - name: "📂 download diagram artifacts"
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: diagram
      #     path: .
      - name: "🚀 release"
        run: |
          scp -i {{ secrets.CERT_FILE }} -o "StrictHostKeyChecking=no" ./docker-compose.yml ${{ secrets.DEPLOY_SERVER }}:~/nodejs_cicd/
          ssh -i {{ secrets.CERT_FILE }} -o "StrictHostKeyChecking=no" ${{ secrets.DEPLOY_SERVER }} << 'ENDSSH'
            cd ~/nodejs_cicd
            docker compose down
            docker compose pull
            docker compose up --build -d

            docker image prune
            rm ./docker-compose.yml
          ENDSSH
  cleanup:
    name: Cleanup actions
    needs:
      - release
    runs-on: ubuntu-22.04
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            build
            docker
            diagram
